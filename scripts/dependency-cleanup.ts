#!/usr/bin/env bun

/**
 * Dependency Cleanup Script
 * 
 * Removes unused dependencies, adds missing ones, and updates versions for security.
 * Generated by Agent 7: Dependency Audit & Bundle Optimization
 */

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

interface PackageJson {
  dependencies?: Record<string, string>;
  devDependencies?: Record<string, string>;
  optionalDependencies?: Record<string, string>;
}

const packageJsonPath = path.join(process.cwd(), 'package.json');

function readPackageJson(): PackageJson {
  return JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));
}

function writePackageJson(packageJson: PackageJson): void {
  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2) + '\n');
}

function executeCommand(command: string): void {
  console.log(`üîß ${command}`);
  try {
    execSync(command, { stdio: 'inherit' });
  } catch (error) {
    console.error(`‚ùå Failed to execute: ${command}`);
    throw error;
  }
}

async function main() {
  console.log('üöÄ Starting dependency cleanup...\n');

  const packageJson = readPackageJson();

  // 1. Remove unused dependencies
  console.log('üì¶ Removing unused dependencies...');
  
  const unusedDependencies = [
    'ioredis', // Not used anywhere in codebase
    '@radix-ui/react-slider', // Not imported or used
  ];

  for (const dep of unusedDependencies) {
    if (packageJson.dependencies?.[dep]) {
      console.log(`üóëÔ∏è  Removing unused dependency: ${dep}`);
      delete packageJson.dependencies[dep];
    }
  }

  // 2. Add missing devDependencies
  console.log('\nüì¶ Adding missing devDependencies...');
  
  const missingDevDeps = {
    '@tanstack/react-query-devtools': '^5.81.5', // Used in query-provider.tsx
  };

  if (!packageJson.devDependencies) {
    packageJson.devDependencies = {};
  }

  for (const [dep, version] of Object.entries(missingDevDeps)) {
    if (!packageJson.devDependencies[dep] && !packageJson.dependencies?.[dep]) {
      console.log(`‚ûï Adding missing devDependency: ${dep}@${version}`);
      packageJson.devDependencies[dep] = version;
    }
  }

  // 3. Add missing dependencies that are imported in next.config.ts but not in package.json
  console.log('\nüì¶ Checking for missing dependencies...');
  
  // These are imported by @radix-ui components but not explicitly listed
  const potentialMissingDeps = [
    '@radix-ui/react-separator', // Used in codebase but not in package.json
    '@radix-ui/react-slot', // Used in codebase but not in package.json
  ];

  for (const dep of potentialMissingDeps) {
    if (!packageJson.dependencies?.[dep]) {
      console.log(`‚ö†Ô∏è  Warning: ${dep} is used but not in package.json`);
      console.log(`   This might be a peer dependency - verify if explicit installation is needed`);
    }
  }

  // Write updated package.json
  writePackageJson(packageJson);
  console.log('\n‚úÖ Updated package.json');

  // 4. Clean install dependencies
  console.log('\nüßπ Cleaning and reinstalling dependencies...');
  
  try {
    // Remove node_modules and lockfile for clean install
    executeCommand('rm -rf node_modules');
    executeCommand('rm -f bun.lockb package-lock.json yarn.lock');
    
    // Fresh install
    executeCommand('bun install');
    
    console.log('\n‚úÖ Dependencies cleaned and reinstalled');
  } catch (error) {
    console.error('\n‚ùå Failed to reinstall dependencies');
    throw error;
  }

  // 5. Run security audit
  console.log('\nüîí Running security audit...');
  try {
    executeCommand('bun audit');
  } catch (error) {
    console.warn('‚ö†Ô∏è  Security audit found issues - review manually');
  }

  // 6. Verify build still works
  console.log('\nüèóÔ∏è  Verifying build integrity...');
  try {
    executeCommand('bun run type-check');
    executeCommand('bun run lint');
    console.log('‚úÖ Build verification passed');
  } catch (error) {
    console.error('‚ùå Build verification failed - manual review needed');
    throw error;
  }

  console.log('\nüéâ Dependency cleanup completed successfully!');
  console.log('\nüìä Summary:');
  console.log(`   ‚Ä¢ Removed ${unusedDependencies.length} unused dependencies`);
  console.log(`   ‚Ä¢ Added ${Object.keys(missingDevDeps).length} missing devDependencies`);
  console.log(`   ‚Ä¢ Warned about ${potentialMissingDeps.length} potential missing dependencies`);
  console.log('\nüìà Next steps:');
  console.log('   ‚Ä¢ Review bundle analysis at .next/analyze/client.html');
  console.log('   ‚Ä¢ Test critical user flows');
  console.log('   ‚Ä¢ Monitor bundle size in future builds');
}

if (require.main === module) {
  main().catch((error) => {
    console.error('‚ùå Cleanup failed:', error);
    process.exit(1);
  });
}