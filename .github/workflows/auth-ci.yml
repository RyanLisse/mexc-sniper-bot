name: Auth System CI/CD

on:
  pull_request:
    branches: [main]
    paths:
      - 'app/api/auth/**'
      - 'app/api/health/auth/**'
      - 'src/lib/kinde-auth.ts'
      - 'src/components/auth/**'
      - 'tests/**/*auth*'
      - '__mocks__/@kinde-oss/**'
      - '.env.test'
      - '.env.staging'
  push:
    branches: [main]
    paths:
      - 'app/api/auth/**'
      - 'app/api/health/auth/**'
      - 'src/lib/kinde-auth.ts'
      - 'src/components/auth/**'
      - 'tests/**/*auth*'
      - '__mocks__/@kinde-oss/**'

env:
  FORCE_COLOR: 3
  CI: true

jobs:
  # Test environment validation
  validate-env:
    name: Validate Environment Configuration
    runs-on: ubuntu-latest
    outputs:
      has-secrets: ${{ steps.check-secrets.outputs.has-secrets }}
    steps:
      - name: Check for required secrets
        id: check-secrets
        run: |
          if [[ -n "${{ secrets.KINDE_CLIENT_ID_TEST }}" && -n "${{ secrets.KINDE_CLIENT_SECRET_TEST }}" ]]; then
            echo "has-secrets=true" >> $GITHUB_OUTPUT
          else
            echo "has-secrets=false" >> $GITHUB_OUTPUT
            echo "::warning::Missing Kinde test secrets - some tests will be skipped"
          fi

  # Unit and Integration Tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: validate-env
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: mexc_sniper_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      # Test database
      DATABASE_URL: postgresql://postgres:testpass@localhost:5432/mexc_sniper_test
      
      # Test-specific Kinde configuration
      KINDE_CLIENT_ID: ${{ secrets.KINDE_CLIENT_ID_TEST || 'test_client_id' }}
      KINDE_CLIENT_SECRET: ${{ secrets.KINDE_CLIENT_SECRET_TEST || 'test_client_secret' }}
      KINDE_ISSUER_URL: ${{ secrets.KINDE_ISSUER_URL_TEST || 'https://test.kinde.com' }}
      KINDE_SITE_URL: http://localhost:3008
      KINDE_POST_LOGOUT_REDIRECT_URL: http://localhost:3008
      KINDE_POST_LOGIN_REDIRECT_URL: http://localhost:3008/dashboard
      
      # Required for AI agents (use test keys)
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST || 'sk-test-key' }}
      
      # Encryption (test key)
      ENCRYPTION_MASTER_KEY: "Zka8eT3g9wqHOeWEOta6f7iII+zqCeE/rSFsPAA6FII="
      
      # Test environment flags
      NODE_ENV: test
      SKIP_AUTH_IN_TESTS: true
      ENABLE_DEBUG_LOGGING: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun runtime
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run database migrations
        run: bun run db:migrate

      - name: Run lint checks
        run: bun run lint:check

      - name: Run type checking
        run: bun run type-check

      - name: Run unit tests
        run: bun run test:unit --reporter=github-actions
        env:
          VITEST_REPORTER: github-actions

      - name: Run integration tests
        run: bun run test:integration --reporter=github-actions
        env:
          VITEST_REPORTER: github-actions

      - name: Generate test coverage
        run: bun run test:coverage --reporter=github-actions
        env:
          VITEST_REPORTER: github-actions

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-report-${{ github.run_number }}
          path: coverage/
          retention-days: 7

      - name: Build application
        run: bun run build

      - name: Health check validation
        run: |
          # Start the application in background
          bun run start &
          APP_PID=$!
          
          # Wait for application to start
          echo "Waiting for application to start..."
          sleep 15
          
          # Test health endpoints
          echo "Testing auth health endpoint..."
          curl -f http://localhost:3008/api/health/auth || (echo "Auth health check failed" && exit 1)
          
          echo "Testing system health endpoint..."
          curl -f http://localhost:3008/api/health/system || (echo "System health check failed" && exit 1)
          
          # Clean up
          kill $APP_PID || true

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: build-artifacts-${{ github.run_number }}
          path: |
            .next/
            !.next/cache/
          retention-days: 3

  # E2E Authentication Tests
  e2e-test:
    name: E2E Authentication Tests
    runs-on: ubuntu-latest
    needs: [validate-env, test]
    if: needs.validate-env.outputs.has-secrets == 'true'
    
    env:
      # Use test Kinde credentials for E2E
      KINDE_CLIENT_ID: ${{ secrets.KINDE_CLIENT_ID_TEST }}
      KINDE_CLIENT_SECRET: ${{ secrets.KINDE_CLIENT_SECRET_TEST }}
      KINDE_ISSUER_URL: ${{ secrets.KINDE_ISSUER_URL_TEST }}
      KINDE_SITE_URL: http://localhost:3008
      KINDE_POST_LOGOUT_REDIRECT_URL: http://localhost:3008
      KINDE_POST_LOGIN_REDIRECT_URL: http://localhost:3008/dashboard
      
      # Database for E2E tests
      DATABASE_URL: ${{ secrets.DATABASE_URL_TEST || 'file:./test-e2e.db' }}
      
      # AI and other services
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
      ENCRYPTION_MASTER_KEY: "Zka8eT3g9wqHOeWEOta6f7iII+zqCeE/rSFsPAA6FII="
      
      # E2E environment
      NODE_ENV: test
      PLAYWRIGHT_BROWSERS_PATH: 0

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun runtime
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Install Playwright browsers
        run: bunx playwright install --with-deps chromium

      - name: Build application for E2E
        run: bun run build

      - name: Run database migrations for E2E
        run: bun run db:migrate

      - name: Run Playwright E2E tests
        run: bun run test:e2e --reporter=github
        env:
          PLAYWRIGHT_REPORTER: github

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report-${{ github.run_number }}
          path: playwright-report/
          retention-days: 7

      - name: Upload test videos
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-videos-${{ github.run_number }}
          path: test-results/
          retention-days: 7

  # Security and dependency checks
  security-scan:
    name: Security & Dependency Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun runtime
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run security audit
        run: bun audit
        continue-on-error: true

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Performance benchmarks
  performance-test:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    env:
      NODE_ENV: test
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun runtime
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run performance benchmarks
        run: bun run test:bench --reporter=verbose

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results-${{ github.run_number }}
          path: benchmark-results.json
          retention-days: 30

  # Deployment validation (for main branch pushes)
  deploy-validation:
    name: Deployment Validation
    runs-on: ubuntu-latest
    needs: [test, e2e-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun runtime
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Validate deployment configuration
        run: |
          echo "Validating Vercel configuration..."
          if [[ -f "vercel.json" ]]; then
            echo "✓ vercel.json found"
          else
            echo "⚠ vercel.json not found"
          fi
          
          echo "Validating Next.js configuration..."
          if [[ -f "next.config.ts" ]]; then
            echo "✓ next.config.ts found"
          else
            echo "⚠ next.config.ts not found"
          fi

      - name: Test production build
        run: |
          NODE_ENV=production bun run build
          echo "✓ Production build successful"

      - name: Validate environment variables
        run: |
          echo "Checking required environment variables for production..."
          
          # This would be expanded to check actual production requirements
          echo "✓ Environment validation complete"

# Additional job for PR preview deployments
  pr-preview:
    name: PR Preview Deployment
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'pull_request' && !github.event.pull_request.draft
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Auth System CI/CD Status**
              
              ✅ Unit & Integration Tests: Passed
              ✅ Build: Successful
              ✅ Health Checks: Validated
              
              ${process.env.E2E_STATUS || '⏭️ E2E Tests: Skipped (missing secrets)'}
              
              📊 [View detailed test results](${context.payload.pull_request.html_url}/checks)
              `
            })