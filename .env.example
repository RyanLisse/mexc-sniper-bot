# ==============================================================================
# MEXC Sniper Bot - Environment Configuration
# ==============================================================================
# Copy this file to .env.local and fill in your actual values
#
# ‚ö†Ô∏è  SECURITY WARNING: Never commit .env.local to version control!
# ‚ö†Ô∏è  Real API keys and secrets must never be exposed publicly!
#
# This file provides all necessary environment variables for the MEXC sniper bot
# multi-agent TypeScript system with comprehensive trading capabilities.

# ==============================================================================
# üîê AUTHENTICATION - Supabase Auth
# ==============================================================================

# Supabase Authentication
# Set up your Supabase project at https://supabase.com
NEXT_PUBLIC_SUPABASE_URL="https://your-project.supabase.co"
NEXT_PUBLIC_SUPABASE_ANON_KEY="your-anon-key"
SUPABASE_SERVICE_ROLE_KEY="your-service-role-key"

# Supabase SMTP Configuration (Recommended - Bypasses 2 emails/hour limit)
# Configure custom SMTP in Supabase dashboard: Authentication > Settings > SMTP Settings
# Popular providers: Resend, SendGrid, AWS SES, Mailgun
SUPABASE_SMTP_HOST="smtp.resend.com"
SUPABASE_SMTP_PORT="587"
SUPABASE_SMTP_USER="resend"
SUPABASE_SMTP_PASS="re_your-api-key"

# Alternative SMTP Providers:
# SendGrid: SUPABASE_SMTP_HOST="smtp.sendgrid.net", SUPABASE_SMTP_PORT="587", SUPABASE_SMTP_USER="apikey"
# AWS SES: SUPABASE_SMTP_HOST="email-smtp.us-east-1.amazonaws.com", SUPABASE_SMTP_PORT="587"
# Mailgun: SUPABASE_SMTP_HOST="smtp.mailgun.org", SUPABASE_SMTP_PORT="587"

# ==============================================================================
# ü§ñ AI INTEGRATION - OpenAI (REQUIRED for Multi-Agent System)
# ==============================================================================
#
# The TypeScript multi-agent system requires OpenAI API access for:
# - MexcApiAgent: MEXC API analysis and signal extraction
# - PatternDiscoveryAgent: Ready state pattern detection
# - CalendarAgent: New listing discovery and monitoring
# - SymbolAnalysisAgent: Real-time readiness assessment
# - MexcOrchestrator: Multi-agent workflow coordination
#
# Get your API key from https://platform.openai.com/api-keys

OPENAI_API_KEY="sk-your-openai-api-key"

# Optional: Additional AI services for enhanced capabilities
ANTHROPIC_API_KEY="sk-ant-your-anthropic-api-key"
GEMINI_API_KEY="your-gemini-api-key"
PERPLEXITY_API_KEY="pplx-your-perplexity-api-key"

# ==============================================================================
# üìä MEXC API INTEGRATION (OPTIONAL - for live trading)
# ==============================================================================
#
# MEXC exchange API credentials for live trading operations.
# Get your keys from MEXC Exchange -> API Management
#
# ‚ö†Ô∏è  PRODUCTION CRITICAL: Ensure your deployment IP is allowlisted
# in your MEXC API key settings to avoid signature validation errors.
# The system will work without these for demo/testing purposes.

MEXC_API_KEY="your-mexc-api-key"
MEXC_SECRET_KEY="your-mexc-secret-key"
MEXC_BASE_URL="https://api.mexc.com"
MEXC_WEBSOCKET_URL="wss://wbs.mexc.com/ws"

# MEXC API Performance Settings (Advanced)
# MEXC_TIMEOUT="30000"
# MEXC_RETRY_COUNT="3"
# MEXC_RETRY_DELAY="1000"
# MEXC_RATE_LIMIT_DELAY="100"

# ==============================================================================
# üîí SECURE ENCRYPTION (REQUIRED for storing API credentials)
# ==============================================================================
#
# Master encryption key for securing stored API credentials in the database.
# This key is used by SecureEncryptionService for AES-256-GCM encryption.
#
# üîë Generate a secure key using: openssl rand -base64 32
# ‚ö†Ô∏è  CRITICAL: Loss of this key means loss of all encrypted data!
# ‚ö†Ô∏è  Keep this key secure and backed up separately!

ENCRYPTION_MASTER_KEY="generate-with-openssl-rand-base64-32"

# Optional: Key ID for rotation tracking (advanced usage)
# ENCRYPTION_KEY_ID="default"

# Legacy encryption key (only needed during migration from old system)
# Run migration script: bun run scripts/migrate-encryption.ts --force
# OLD_ENCRYPTION_KEY="legacy-key-for-migration-only"

# ==============================================================================
# üóÑÔ∏è DATABASE CONFIGURATION
# ==============================================================================
#
# The system uses Supabase PostgreSQL database for all environments.
# Supabase provides managed PostgreSQL with built-in auth, real-time, and edge functions.

# Supabase Database (Required)
# Set up your Supabase project at https://supabase.com
# Get your connection string from: Settings > Database > Connection string
DATABASE_URL="postgresql://postgres:[YOUR-PASSWORD]@db.[YOUR-PROJECT-REF].supabase.co:5432/postgres?sslmode=require"

# Alternative: Local PostgreSQL for development only
# DATABASE_URL="postgresql://user:password@localhost:5432/mexc_sniper"

# ==============================================================================
# ‚ö° WORKFLOW ORCHESTRATION - Inngest (AUTO-GENERATED)
# ==============================================================================
#
# Inngest handles the TypeScript multi-agent workflows:
# - pollMexcCalendar: Multi-agent calendar discovery
# - watchMexcSymbol: Symbol monitoring with AI analysis
# - analyzeMexcPatterns: Pattern discovery and validation
# - createMexcTradingStrategy: AI-powered strategy creation
#
# These keys are auto-generated if not provided.
# For production, generate stable keys at https://app.inngest.com

INNGEST_SIGNING_KEY="signkey-dev-auto-generated-if-not-provided"
INNGEST_EVENT_KEY="auto-generated-event-key-for-local-development"

# Production Inngest (set these for stable production keys)
# INNGEST_SIGNING_KEY="signkey-prod-your-production-key"
# INNGEST_EVENT_KEY="your-production-event-key"

# ==============================================================================
# üìà CACHING & PERFORMANCE (Phase 2: Redis/Valkey Enhancement)
# ==============================================================================
#
# Redis/Valkey for caching and rate limiting (optional but recommended for production)
# Phase 2 implements intelligent caching with graceful degradation

VALKEY_URL="redis://localhost:6379/0"
# Alternative Redis configurations:
# REDIS_URL="redis://localhost:6379/0"
# REDIS_HOST="localhost"
# REDIS_PORT="6379"
# REDIS_PASSWORD="your-redis-password"

# Phase 2 Cache Configuration (Enhanced)
CACHE_ENABLED="true"
CACHE_PREFIX="mexc-sniper:"
CACHE_TTL="300"

# Phase 2: API Response Caching (User Preference: 5-second TTL)
CACHE_API_RESPONSE_TTL="5000"  # 5 seconds for API responses
CACHE_MARKET_DATA_TTL="5000"   # 5 seconds for market data
CACHE_PATTERN_DATA_TTL="30000" # 30 seconds for pattern analysis
CACHE_TRADING_SIGNAL_TTL="10000" # 10 seconds for trading signals

# Phase 2: Performance Enhancement Settings
CACHE_ENABLE_GRACEFUL_DEGRADATION="true"  # Cache operations become no-ops when unavailable
CACHE_ENABLE_WARMING="true"                # Proactive cache warming for frequently accessed data
CACHE_ENABLE_METRICS="true"                # Performance monitoring and analytics
CACHE_ENABLE_BATCH_OPERATIONS="true"       # Intelligent batching for bulk operations
CACHE_MAX_BATCH_SIZE="50"                  # Maximum items per batch operation
CACHE_ENABLE_INCREMENTAL_PROCESSING="true" # Delta updates for data efficiency

# Phase 2: Cache Warming Configuration
CACHE_WARMING_INTERVAL="30000"             # 30 seconds between warming cycles
CACHE_WARMING_MAX_CONCURRENT="3"           # Maximum concurrent warming operations
CACHE_WARMING_ENABLE_MEXC_SYMBOLS="true"   # Warm up MEXC symbol data
CACHE_WARMING_ENABLE_PATTERN_DATA="true"   # Warm up pattern detection data
CACHE_WARMING_ENABLE_ACTIVITY_DATA="true"  # Warm up activity data

# Phase 2: Performance Monitoring
PERFORMANCE_MONITORING_ENABLED="true"      # Enable real-time performance monitoring
PERFORMANCE_METRICS_INTERVAL="30000"       # 30 seconds metrics collection
PERFORMANCE_ENABLE_ALERTS="true"           # Enable performance alerts
PERFORMANCE_ENABLE_RECOMMENDATIONS="true"  # Enable optimization recommendations

# ==============================================================================
# üõ°Ô∏è RATE LIMITING & SECURITY (OPTIONAL)
# ==============================================================================
#
# Rate limiting configuration for API protection

RATE_LIMIT_ENABLED="true"
RATE_LIMIT_REQUESTS="100"
RATE_LIMIT_WINDOW="60"

# ==============================================================================
# üöÄ DEPLOYMENT ENVIRONMENT (AUTO-DETECTED)
# ==============================================================================
#
# These are typically set by deployment platforms

# Environment detection
# NODE_ENV="production"              # Set by platform
# VERCEL="1"                        # Set by Vercel
# RAILWAY_ENVIRONMENT="production"   # Set by Railway

# ==============================================================================
# üéØ AUTO-SNIPING CONFIGURATION (TRADING AUTOMATION)
# ==============================================================================
#
# Auto-sniping system configuration for automated trading execution

# Auto-sniping master control (enabled by default, set to "false" to disable)
AUTO_SNIPING_ENABLED="true"   # Default: enabled (only set to "false" to disable)

# Auto-sniping execution parameters (all optional - defaults provided)
# AUTO_SNIPING_MAX_POSITIONS="5"              # Maximum concurrent positions
# AUTO_SNIPING_MAX_DAILY_TRADES="10"          # Daily trade limit
# AUTO_SNIPING_POSITION_SIZE_USDT="10"        # Position size in USDT
# AUTO_SNIPING_MIN_CONFIDENCE="80"            # Minimum pattern confidence (%)
# AUTO_SNIPING_ALLOWED_PATTERNS="ready_state" # Comma-separated pattern types
# AUTO_SNIPING_REQUIRE_CALENDAR="true"        # Require calendar confirmation
# AUTO_SNIPING_STOP_LOSS_PERCENT="5"          # Stop loss percentage
# AUTO_SNIPING_TAKE_PROFIT_PERCENT="10"       # Take profit percentage
# AUTO_SNIPING_MAX_DRAWDOWN_PERCENT="20"      # Maximum drawdown limit
# AUTO_SNIPING_ENABLE_ADVANCE_DETECTION="true" # Enable advance detection
# AUTO_SNIPING_ADVANCE_HOURS_THRESHOLD="3.5"  # Hours threshold for advance detection
# AUTO_SNIPING_ENABLE_MULTI_PHASE="false"     # Enable multi-phase strategy

# ==============================================================================
# üß™ TESTING & DEVELOPMENT (OPTIONAL)
# ==============================================================================
#
# Testing and development specific variables

# Test environment bypass
# PLAYWRIGHT_TEST="true"        # Enable test mode for E2E tests
# VITEST="true"                 # Enable test mode for unit tests

# Debug modes
# DEBUG="mexc-api:*"            # Enable debug logging
# VERBOSE_LOGGING="true"        # Enable verbose logging

# Optional credentials for automated E2E tests
TEST_USER_EMAIL=
TEST_USER_PASSWORD=

# ==============================================================================
# üìù SETUP INSTRUCTIONS
# ==============================================================================
#
# 1. QUICK START (REQUIRED SETUP):
#    ‚úÖ Copy this file to .env.local
#    ‚úÖ Set up Supabase project and configure SUPABASE_* variables
#    ‚úÖ Get OpenAI API key for AI agent functionality
#    ‚úÖ Generate encryption master key: openssl rand -base64 32
#    ‚úÖ Configure SMTP settings in Supabase dashboard to bypass email rate limits
#
# 2. PRODUCTION SETUP:
#    ‚úÖ Set up Supabase project and configure DATABASE_URL with your connection string
#    ‚úÖ Configure MEXC API credentials (ensure IP allowlisting)
#    ‚úÖ Set up Redis/Valkey for caching
#    ‚úÖ Generate stable Inngest keys for production
#    ‚úÖ Configure custom SMTP provider (Resend, SendGrid, etc.)
#
# 3. OPTIONAL FEATURES:
#    ‚ö†Ô∏è  Add additional AI service keys for enhanced capabilities
#    ‚ö†Ô∏è  Configure rate limiting for API protection
#    ‚ö†Ô∏è  Set up monitoring and logging services
#
# 4. SECURITY CHECKLIST:
#    üîí Never commit real API keys to version control
#    üîí Use strong, unique encryption keys
#    üîí Allowlist deployment IPs for MEXC API
#    üîí Enable rate limiting in production
#    üîí Backup encryption keys securely
#
# 5. VERIFICATION:
#    üß™ Run: bun run db:check (test database connection)
#    üß™ Run: npm run build (verify configuration)
#    üß™ Run: npm run test (run test suite)
#    üß™ Check: /api/health/db (health check endpoint)

# ==============================================================================
# üîç TROUBLESHOOTING
# ==============================================================================
#
# Common Issues and Solutions:
#
# 1. "Database connection failed"
#    üí° Verify DATABASE_URL is set correctly with Supabase connection string
#    üí° Check Supabase project status and connection pooling settings
#    üí° Ensure your IP is not blocked by Supabase network restrictions
#
# 2. "MEXC API signature validation failed"
#    üí° Ensure deployment IP is allowlisted in MEXC API settings
#    üí° Verify MEXC_API_KEY and MEXC_SECRET_KEY are correct
#    üí° Check server time synchronization
#
# 3. "Authentication required" errors
#    üí° Verify all SUPABASE_* variables are set correctly
#    üí° Check Supabase project configuration and RLS policies
#    üí° Ensure NEXT_PUBLIC_SUPABASE_URL matches your project URL
#    üí° Configure custom SMTP to avoid Supabase email rate limits (2 emails/hour)
#
# 4. "OpenAI API failed" errors
#    üí° Verify OPENAI_API_KEY is valid and has sufficient credits
#    üí° Check API usage limits in OpenAI dashboard
#
# 5. "Failed to decrypt data" errors
#    üí° Ensure ENCRYPTION_MASTER_KEY matches the one used to encrypt data
#    üí° If migrating, set OLD_ENCRYPTION_KEY for migration script
#    üí° Run: bun run scripts/migrate-encryption.ts --force
#
# 6. TypeScript multi-agent workflow issues
#    üí° Check INNGEST_* variables are set
#    üí° Verify Inngest dev server is running: npx inngest-cli dev
#    üí° Check agent logs in browser console or server logs
#
# For more help, see: /docs/guides/QUICKSTART.md

# ==============================================================================
# üèóÔ∏è SYSTEM ARCHITECTURE NOTES
# ==============================================================================
#
# This MEXC Sniper Bot features:
# - ü§ñ 5 specialized TypeScript AI agents with GPT-4 integration
# - ‚ö° Inngest workflow orchestration for reliable event-driven tasks
# - üóÑÔ∏è Drizzle ORM with Supabase PostgreSQL for data persistence
# - üîÑ TanStack Query for real-time data fetching and caching
# - üîê Supabase Auth with custom SMTP for secure user authentication
# - üè¢ Serverless deployment optimized for Vercel with edge functions
# - üìä Real-time MEXC exchange integration for trading signals
# - üéØ Pattern discovery for ready state detection (sts:2, st:2, tt:4)
# - üíº User-configurable take profit levels and risk management
# - üìß Custom SMTP integration bypassing Supabase email rate limits
#
# The system operates entirely in TypeScript with no Python dependencies,
# designed for modern serverless deployment with global edge optimization.